import com.fasterxml.jackson.databind.ObjectMapper;
import documents.MonthlyStat;
import factories.IPersonFactory;
import factories.StrategyFactory;
import gameflow.BasicRound;
import gameflow.InitialRound;
import input.*;
import interfaces.IPerson;
import interfaces.ProducerStrategy;
import output.ConsumerOutput;
import output.DistributorOutput;
import output.ProducerOutput;
import output.Writer;
import persons.Consumer;
import persons.Distributor;
import persons.Producer;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

/**
 * Entry point to the simulation
 */
public final class Main {

    private Main() { }

    /**
     * Main function which reads the input file and starts simulation
     *
     * @param args input and output files
     * @throws Exception might error when reading/writing/opening files, parsing JSON
     */
    public static void main(final String[] args) throws Exception {
//        InputLoader inputLoader = new InputLoader(args[0]);
//        Input input = inputLoader.readData();
//
//        ArrayList<Consumer> consumersAll = new ArrayList<>();
//        ArrayList<Distributor> distributorsAll = new ArrayList<>();
//        ArrayList<Producer> producersAll = new ArrayList<>();
//        List<ConsumerOutput> consumerOutput = new ArrayList<>();
//        List<DistributorOutput> distributorOutput = new ArrayList<>();
//        List<ProducerOutput> producerOutput = new ArrayList<>();
//
//        System.out.println(input);
//
//        IPersonFactory personFactory = IPersonFactory.getInstance();
//        // forming the lists of consumers and distributors
//        for (ConsumerInputData consumer : input.getConsumersData()) {
//            IPerson newConsumator = personFactory.getPerson("CONSUMER", consumer);
//            consumersAll.add((Consumer) newConsumator);
//        }
//
//        for (DistributorInputData distributor : input.getDistributorsData()) {
//            IPerson newDistributor = personFactory.getPerson("DISTRIBUTOR", distributor);
//            distributorsAll.add((Distributor) newDistributor);
//        }
//
//        for (ProducerInputData producer : input.getProducersData()) {
//            IPerson newProducer = personFactory.getPerson("PRODUCER", producer);
//            producersAll.add((Producer) newProducer);
//        }
//
//        System.out.println(consumersAll);
//        System.out.println(distributorsAll);
//        System.out.println(producersAll);
//
//        System.out.println(distributorsAll.get(0).getProducerStrategy());
//
//        ProducerStrategy strategy = StrategyFactory.createStrategy(distributorsAll.get(0).getProducerStrategy(), producersAll);
//
//        strategy.sortByStrategy();
//
//        System.out.println(producersAll);

        InputLoader inputLoader = new InputLoader(args[0]);
        InitialRound start = new InitialRound();
        IPersonFactory personFactory = IPersonFactory.getInstance();
        ArrayList<Consumer> consumersAll = new ArrayList<>();
        ArrayList<Distributor> distributorsAll = new ArrayList<>();
        ArrayList<Producer> producersAll = new ArrayList<>();

        List<ConsumerOutput> consumerOutput = new ArrayList<>();
        List<DistributorOutput> distributorOutput = new ArrayList<>();
        List<ProducerOutput> producerOutput = new ArrayList<>();

        // read data from file
        Input input = inputLoader.readData();

        // ROUND 0
        start.doInitialRound(input);

        // keeping data generated by round0
        consumersAll.addAll(start.getConsumersAll());
        distributorsAll.addAll(start.getDistributorsAll());
        producersAll.addAll(start.getProducersAll());

//        System.out.println(consumersAll);
//        System.out.println(distributorsAll);
//        System.out.println(producersAll);



        // ROUND 1
        BasicRound round = new BasicRound();
        round.doBasicRound(consumersAll, distributorsAll, producersAll, input, 0);

//        System.out.println(consumersAll);
//        System.out.println(distributorsAll);
//        System.out.println(producersAll);

        consumersAll.clear();
        distributorsAll.clear();
        producersAll.clear();

        // OTHER ROUNDS
        for (int i = 1; i < input.getNumberofTurns(); i++) {
            round.doBasicRound(consumersAll, distributorsAll, producersAll, input, i);
        }

        // keeping final data
        consumersAll.clear();
        consumersAll.addAll(round.getConsumersAllUpdate());
        distributorsAll.clear();
        distributorsAll.addAll(round.getDistributorsAllUpdate());
        producersAll.clear();
        producersAll.addAll(round.getProducersAllUpdate());







//        // forming the final arrays for output
//        for (Distributor distributor : distributorsAll) {
//            distributorOutput.add(new DistributorOutput(
//                    distributor.getId(),
//                    distributor.getInitialBudget(),
//                    distributor.isBankrupt(),
//                    distributor.getContracts()));
//        }
//
//        for (Consumer consumer : consumersAll) {
//            consumerOutput.add(new ConsumerOutput(
//                    consumer.getId(),
//                    consumer.isBankRupt(),
//                    consumer.getInitialBudget()));
//        }
//
//        ObjectMapper objectMapper = new ObjectMapper();
//        Writer writer = new Writer(consumerOutput, distributorOutput);
//        writer.writeFile(objectMapper, args[1]);
//    }





















        // forming the final arrays for output
        for (Distributor distributor : distributorsAll) {
            distributorOutput.add(new DistributorOutput(
                    distributor.getId(),
                    distributor.getEnergyNeededKW(),
                    distributor.getContractCost(),
                    distributor.getInitialBudget(),
                    distributor.getProducerStrategy(),
                    distributor.isBankrupt(),
                    distributor.getContracts()));
        }

        for (Consumer consumer : consumersAll) {
            consumerOutput.add(new ConsumerOutput(
                    consumer.getId(),
                    consumer.isBankrupt(),
                    consumer.getInitialBudget()));
        }

        producersAll.sort(Comparator.comparing(Producer::getId));

        for (Producer producer : producersAll) {
            producerOutput.add(new ProducerOutput(
                    producer.getId(),
                    producer.getMaxDistributors(),
                    producer.getPriceKW(),
                    producer.getEnergyType(),
                    producer.getEnergyPerDistributor(),
                    producer.getMonthlyStats()));
        }

        ObjectMapper objectMapper = new ObjectMapper();
        Writer writer = new Writer(consumerOutput, distributorOutput, producerOutput);
        writer.writeFile(objectMapper, args[1]);
    }
}
