Starting audit...
[ERROR] /home/andreea/Desktop/project---phase---2/./src/Main.java:2:8: Unused import - documents.MonthlyStat. [UnusedImports]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/Main.java:4:8: Unused import - factories.StrategyFactory. [UnusedImports]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/Main.java:7:13: Using the '.*' form of import should be avoided - input.*. [AvoidStarImport]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/Main.java:8:8: Unused import - interfaces.IPerson. [UnusedImports]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/Main.java:9:8: Unused import - interfaces.ProducerStrategy. [UnusedImports]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/Main.java:35:5: Method length is 177 lines (max allowed is 150). [MethodLength]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/Main.java:71: Line is longer than 100 characters (found 129). [LineLength]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/factories/StrategyFactory.java:5:8: Unused import - strategies.EnergyChoiceStrategyType. [UnusedImports]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/factories/StrategyFactory.java:12:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/factories/StrategyFactory.java:14:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/factories/IPersonFactory.java:11:1: Class IPersonFactory should be declared as final. [FinalClass]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/factories/IPersonFactory.java:18:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Consumer.java:30:5: Class 'Consumer' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Consumer' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Consumer.java:34:5: Class 'Consumer' looks like designed for extension (can be subclassed), but the method 'isBankrupt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Consumer' final or making the method 'isBankrupt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Consumer.java:38:5: Class 'Consumer' looks like designed for extension (can be subclassed), but the method 'setBankrupt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Consumer' final or making the method 'setBankrupt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Consumer.java:42:5: Class 'Consumer' looks like designed for extension (can be subclassed), but the method 'getInitialBudget' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Consumer' final or making the method 'getInitialBudget' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Consumer.java:46:5: Class 'Consumer' looks like designed for extension (can be subclassed), but the method 'setInitialBudget' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Consumer' final or making the method 'setInitialBudget' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Consumer.java:50:5: Class 'Consumer' looks like designed for extension (can be subclassed), but the method 'getMonthlyIncome' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Consumer' final or making the method 'getMonthlyIncome' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Consumer.java:54:5: Class 'Consumer' looks like designed for extension (can be subclassed), but the method 'isAlert' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Consumer' final or making the method 'isAlert' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Consumer.java:58:5: Class 'Consumer' looks like designed for extension (can be subclassed), but the method 'setAlert' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Consumer' final or making the method 'setAlert' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Consumer.java:62:5: Class 'Consumer' looks like designed for extension (can be subclassed), but the method 'isContract' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Consumer' final or making the method 'isContract' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Consumer.java:66:5: Class 'Consumer' looks like designed for extension (can be subclassed), but the method 'setContract' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Consumer' final or making the method 'setContract' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Consumer.java:70:5: Class 'Consumer' looks like designed for extension (can be subclassed), but the method 'getRest' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Consumer' final or making the method 'getRest' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Consumer.java:74:5: Class 'Consumer' looks like designed for extension (can be subclassed), but the method 'setRest' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Consumer' final or making the method 'setRest' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Consumer.java:78:5: Class 'Consumer' looks like designed for extension (can be subclassed), but the method 'getContractInfo' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Consumer' final or making the method 'getContractInfo' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Consumer.java:82:5: Class 'Consumer' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Consumer' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Consumer.java:92:5: Class 'Consumer' looks like designed for extension (can be subclassed), but the method 'monthlyPay' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Consumer' final or making the method 'monthlyPay' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Consumer.java:105:5: Class 'Consumer' looks like designed for extension (can be subclassed), but the method 'monthlyReceive' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Consumer' final or making the method 'monthlyReceive' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:7:8: Unused import - java.util.List. [UnusedImports]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:41:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:45:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'getContractLength' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'getContractLength' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:49:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'getInitialBudget' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'getInitialBudget' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:53:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'getInitialInfrastructureCost' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'getInitialInfrastructureCost' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:57:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'getEnergyNeededKW' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'getEnergyNeededKW' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:61:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'getProducerStrategy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'getProducerStrategy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:65:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'getContractCost' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'getContractCost' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:69:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'isBankrupt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'isBankrupt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:73:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'getContracts' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'getContracts' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:77:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'isOk' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'isOk' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:81:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'setOk' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'setOk' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:85:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'getProductionCost' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'getProductionCost' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:89:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'setBankrupt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'setBankrupt' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:93:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'setProductionCost' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'setProductionCost' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:97:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'getProducersList' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'getProducersList' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:101:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'setProducersList' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'setProducersList' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:105:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'setInitialInfrastructureCost' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'setInitialInfrastructureCost' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:109:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:124:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'monthlyPay' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'monthlyPay' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:129:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'monthlyReceive' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'monthlyReceive' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:134:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'calculateProductionCost' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'calculateProductionCost' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:134:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:139:27: '10' is a magic number. [MagicNumber]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:142:5: Class 'Distributor' looks like designed for extension (can be subclassed), but the method 'getContractPrice' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Distributor' final or making the method 'getContractPrice' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:142:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:147:23: '0.2' is a magic number. [MagicNumber]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Distributor.java:150:23: '0.2' is a magic number. [MagicNumber]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Producer.java:37:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Producer.java:41:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'getMaxDistributors' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'getMaxDistributors' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Producer.java:45:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'getPriceKW' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'getPriceKW' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Producer.java:49:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'getEnergyType' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'getEnergyType' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Producer.java:53:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'getEnergyPerDistributor' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'getEnergyPerDistributor' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Producer.java:57:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'getMonthlyStats' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'getMonthlyStats' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Producer.java:61:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'setMonthlyStats' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'setMonthlyStats' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Producer.java:65:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'isRenewable' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'isRenewable' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Producer.java:69:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'setRenewable' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'setRenewable' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Producer.java:73:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'getNrDistributors' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'getNrDistributors' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Producer.java:77:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'setNrDistributors' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'setNrDistributors' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Producer.java:81:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'setEnergyPerDistributor' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'setEnergyPerDistributor' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Producer.java:85:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'getCurrentDistributorsIds' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'getCurrentDistributorsIds' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Producer.java:89:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'setCurrentDistributorsIds' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'setCurrentDistributorsIds' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Producer.java:93:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'renew' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'renew' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Producer.java:93:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/persons/Producer.java:108:5: Class 'Producer' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Producer' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/interfaces/ProducerStrategy.java:3:8: Unused import - persons.Producer. [UnusedImports]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/interfaces/ProducerStrategy.java:5:8: Unused import - java.util.List. [UnusedImports]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/interfaces/ProducerStrategy.java:9:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/InitialRound.java:29:19: '0.2' is a magic number. [MagicNumber]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/InitialRound.java:37:5: Class 'InitialRound' looks like designed for extension (can be subclassed), but the method 'getDistributorsAll' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InitialRound' final or making the method 'getDistributorsAll' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/InitialRound.java:40:5: Class 'InitialRound' looks like designed for extension (can be subclassed), but the method 'getConsumersAll' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InitialRound' final or making the method 'getConsumersAll' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/InitialRound.java:43:5: Class 'InitialRound' looks like designed for extension (can be subclassed), but the method 'getProducersAll' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InitialRound' final or making the method 'getProducersAll' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/InitialRound.java:74: Line is longer than 100 characters (found 120). [LineLength]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/InitialRound.java:80: Line is longer than 100 characters (found 133). [LineLength]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/InitialRound.java:83:77: '+' is not followed by whitespace. [WhitespaceAround]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:15:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:23:5: Class 'BasicRound' looks like designed for extension (can be subclassed), but the method 'getDistributorsAllUpdate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BasicRound' final or making the method 'getDistributorsAllUpdate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:27:5: Class 'BasicRound' looks like designed for extension (can be subclassed), but the method 'setDistributorsAllUpdate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BasicRound' final or making the method 'setDistributorsAllUpdate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:31:5: Class 'BasicRound' looks like designed for extension (can be subclassed), but the method 'getConsumersAllUpdate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BasicRound' final or making the method 'getConsumersAllUpdate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:35:5: Class 'BasicRound' looks like designed for extension (can be subclassed), but the method 'setConsumersAllUpdate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BasicRound' final or making the method 'setConsumersAllUpdate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:39:5: Class 'BasicRound' looks like designed for extension (can be subclassed), but the method 'getProducersAllUpdate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BasicRound' final or making the method 'getProducersAllUpdate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:43:5: Class 'BasicRound' looks like designed for extension (can be subclassed), but the method 'setProducersAllUpdate' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BasicRound' final or making the method 'setProducersAllUpdate' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:54:5: Method length is 181 lines (max allowed is 150). [MethodLength]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:72: Line is longer than 100 characters (found 109). [LineLength]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:82:20: '(' is followed by whitespace. [ParenPad]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:82:60: ')' is preceded with whitespace. [ParenPad]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:86:31: '0.2' is a magic number. [MagicNumber]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:87:27: '(' is followed by whitespace. [ParenPad]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:87:68: ')' is preceded with whitespace. [ParenPad]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:90:31: '0.2' is a magic number. [MagicNumber]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:163:47: '1.2' is a magic number. [MagicNumber]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:167:39: '1.2' is a magic number. [MagicNumber]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:260: Line is longer than 100 characters (found 108). [LineLength]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:268:5: Class 'BasicRound' looks like designed for extension (can be subclassed), but the method 'readUpdateProducer' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BasicRound' final or making the method 'readUpdateProducer' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/gameflow/BasicRound.java:268:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/output/ConsumerOutput.java:18:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/output/DistributorOutput.java:6:8: Unused import - java.util.List. [UnusedImports]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/output/DistributorOutput.java:51:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/documents/MonthlyStat.java:15:5: Class 'MonthlyStat' looks like designed for extension (can be subclassed), but the method 'getMonth' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MonthlyStat' final or making the method 'getMonth' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/documents/MonthlyStat.java:19:5: Class 'MonthlyStat' looks like designed for extension (can be subclassed), but the method 'getDistributorsIds' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MonthlyStat' final or making the method 'getDistributorsIds' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/documents/MonthlyStat.java:23:5: Class 'MonthlyStat' looks like designed for extension (can be subclassed), but the method 'setDistributorsIds' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MonthlyStat' final or making the method 'setDistributorsIds' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/documents/MonthlyStat.java:27:5: Class 'MonthlyStat' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'MonthlyStat' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/documents/Contract.java:15:5: Class 'Contract' looks like designed for extension (can be subclassed), but the method 'getConsumerId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Contract' final or making the method 'getConsumerId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/documents/Contract.java:19:5: Class 'Contract' looks like designed for extension (can be subclassed), but the method 'setConsumerId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Contract' final or making the method 'setConsumerId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/documents/Contract.java:23:5: Class 'Contract' looks like designed for extension (can be subclassed), but the method 'getPrice' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Contract' final or making the method 'getPrice' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/documents/Contract.java:27:5: Class 'Contract' looks like designed for extension (can be subclassed), but the method 'setPrice' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Contract' final or making the method 'setPrice' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/documents/Contract.java:31:5: Class 'Contract' looks like designed for extension (can be subclassed), but the method 'getRemainedContractMonths' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Contract' final or making the method 'getRemainedContractMonths' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/documents/Contract.java:35:5: Class 'Contract' looks like designed for extension (can be subclassed), but the method 'setRemainedContractMonths' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Contract' final or making the method 'setRemainedContractMonths' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/documents/Contract.java:39:5: Class 'Contract' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Contract' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/andreea/Desktop/project---phase---2/./src/strategies/QuantityStrategy.java:19: Line is longer than 100 characters (found 105). [LineLength]
Audit done.
Checkstyle ends with 118 errors.
